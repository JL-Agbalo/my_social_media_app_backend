1. Generate a new Rails API application (if not already created):
   rails new my_social_media_app_backend --api
   Note: This command creates a new Rails application configured to serve as an API.

2. Add the `rack-cors` gem to handle CORS:
   Add to Gemfile:
   gem 'rack-cors', require: 'rack/cors'
   Note: This gem allows your Rails backend to handle Cross-Origin Resource Sharing (CORS) requests.

3. Install the gems:
   bundle install
   Note: This command installs all the gems specified in your Gemfile.

4. Configure CORS:
   Create or update the `config/initializers/cors.rb` file:
   Rails.application.config.middleware.insert_before 0, Rack::Cors do
     allow do
       origins 'http://localhost:3000' # Update this to match your React frontend URL
       resource '*',
         headers: :any,
         methods: [:get, :post, :put, :patch, :delete, :options, :head]
     end
   end
   Note: This configuration allows your React frontend to make requests to your Rails backend.

5. Generate the User model:
   rails generate model User username:string email:string password_digest:string first_name:string last_name:string bio:text profile_picture:string
   Note: This command generates a User model with the specified attributes.

6. Run the migration:
   rails db:migrate
   Note: This command applies the migration to create the `users` table in your database.

7. Create the User model:
   Create the `app/models/user.rb` file:
   class User < ApplicationRecord
     has_secure_password

     validates :username, presence: true, uniqueness: true
     validates :email, presence: true, uniqueness: true
     validates :password, presence: true, length: { minimum: 6 }
   end
   Note: This model includes validations and password security.

8. Add the `bcrypt` gem for password hashing:
   Add to Gemfile:
   gem 'bcrypt', '~> 3.1.7'
   Note: This gem is used for securely hashing passwords.

9. Install the gems:
   bundle install
   Note: This command installs all the gems specified in your Gemfile.

10. Generate the Users controller:
    rails generate controller Users
    Note: This command generates a Users controller with default actions.

11. Edit the Users controller:
    Update the `app/controllers/users_controller.rb` file:
    class UsersController < ApplicationController
      def index
        @users = User.all
        render json: @users
      end

      def show
        @user = User.find(params[:id])
        render json: @user
      end

      def create
        @user = User.new(user_params)
        if @user.save
          render json: @user, status: :created
        else
          render json: @user.errors, status: :unprocessable_entity
        end
      end

      private

      def user_params
        params.require(:user).permit(:username, :email, :password, :password_confirmation, :first_name, :last_name, :bio, :profile_picture)
      end
    end
    Note: This controller handles user-related actions and renders JSON responses.

12. Define routes:
    Update the `config/routes.rb` file:
    Rails.application.routes.draw do
      resources :users
      # other routes...
    end
    Note: This defines RESTful routes for the Users controller.

13. Seed the database with sample data:
    Update the `db/seeds.rb` file:
    User.create!(
      username: 'john_doe',
      email: 'john_doe@example.com',
      password: 'password123',
      password_confirmation: 'password123',
      first_name: 'John',
      last_name: 'Doe',
      bio: 'Just a regular John Doe.',
      profile_picture: 'https://example.com/john_doe.jpg'
    )

    User.create!(
      username: 'jane_doe',
      email: 'jane_doe@example.com',
      password: 'password123',
      password_confirmation: 'password123',
      first_name: 'Jane',
      last_name: 'Doe',
      bio: 'Just a regular Jane Doe.',
      profile_picture: 'https://example.com/jane_doe.jpg'
    )

    User.create!(
      username: 'alice_smith',
      email: 'alice_smith@example.com',
      password: 'password123',
      password_confirmation: 'password123',
      first_name: 'Alice',
      last_name: 'Smith',
      bio: 'Alice in Wonderland.',
      profile_picture: 'https://example.com/alice_smith.jpg'
    )
    Note: This seeds the database with sample user data.

14. Run the seed command:
    rails db:seed
    Note: This command populates the database with the sample data defined in `db/seeds.rb`.

15. Start the Rails server:
    rails server
    Note: This command starts the Rails server.

TODO Contienue to FrontEnd
16. Fetch data from React: 
    Use `axios` or `fetch` in your React application to make HTTP requests to your Rails API. Here is an example using `axios`:
    import React, { useEffect, useState } from 'react';
    import axios from 'axios';

    const App = () => {
      const [users, setUsers] = useState([]);

      useEffect(() => {
        axios.get('http://localhost:3001/users') // Update the URL to match your Rails API endpoint
          .then(response => {
            setUsers(response.data);
          })
          .catch(error => {
            console.error('There was an error fetching the users!', error);
          });
      }, []);

      return (
        <div>
          <h1>Users</h1>
          <ul>
            {users.map(user => (
              <li key={user.id}>{user.username}</li>
            ))}
          </ul>
        </div>
      );
    };

    export default App;
    Note: This example fetches user data from the Rails API and displays it in a list.


    
How React and Ruby on Rails Works

Pattern Overview

1. Frontend (React):
   - The React application is responsible for the user interface and user interactions.
   - It makes HTTP requests to the backend to fetch or send data.
   - It processes and displays the data received from the backend.

2. Backend (Rails):
   - The Rails application serves as an API that handles data storage, business logic, and data retrieval.
   - It exposes endpoints that the frontend can call to perform CRUD (Create, Read, Update, Delete) operations.
   - It returns data in JSON format to the frontend.

How It Runs

1. React Component Initialization:
   - When a React component (e.g., User) is mounted, it triggers a side effect using useEffect to fetch data from the backend.

2. HTTP Request from React:
   - The React component makes an HTTP GET request to the Rails backend using fetch or a similar library (e.g., axios).
   - Example: fetch('http://localhost:3001/users/1') to get the user with ID 1.

3. Rails Controller Action:
   - The Rails backend receives the request and routes it to the appropriate controller action.
   - Example: The show action in UsersController is called with the user ID from the request.

4. Data Retrieval in Rails:
   - The show action retrieves the user from the database using User.find(params[:id]).
   - It then renders the user data as JSON using render json: @user.

5. Response to React:
   - The Rails backend sends the JSON response back to the React frontend.
   - Example response: { "id": 1, "username": "johndoe", "email": "john@example.com", ... }.

6. Data Handling in React:
   - The React component receives the JSON response and updates its state with the user data.
   - The component re-renders to display the updated user information.


=============================================================================

Detailed Explanation
User Logs In:

The user logs in through the React frontend.
The Rails backend authenticates the user and generates a JWT token.
The JWT token is sent back to the React frontend and stored in local storage.
User Navigates to Feed Page:

The user navigates to the feed page in the React frontend.
React Sends Authenticated Request:

The React frontend retrieves the JWT token from local storage.
The React frontend includes the JWT token in the Authorization header of the request to fetch the feed data.
The getFeed() function is called, which sends the request to the Rails backend.
Rails Verifies JWT:

The Rails backend receives the request and extracts the JWT token from the Authorization header.
The Rails backend verifies the JWT token to ensure it is valid and not expired.
If the JWT token is valid, the Rails backend processes the request and returns the feed data.
If the JWT token is invalid or expired, the Rails backend returns an unauthorized error.

=============================================================================

Local Storage: Easy to implement and persistent, but vulnerable to XSS attacks.
Session Storage: Easy to implement and session-based, but vulnerable to XSS attacks and not persistent.
HTTP-Only Cookies: More secure against XSS attacks, but vulnerable to CSRF attacks unless additional measures are taken. Slightly more complex to implement.

Recommendation
For most applications, using HTTP-only cookies is the best practice for storing JWT tokens due to the added security against XSS attacks. However, you should also implement CSRF protection measures, such as using CSRF tokens or the SameSite cookie attribute, to mitigate CSRF risks.

TODO:
To protect data from unauthorized access through your API, consider implementing the following security measures:

1. **Authentication**: Ensure only authenticated users can access your API.
   - Methods: Token-based (e.g., JWT), OAuth2, Session-based

2. **Authorization**: Implement role-based access control (RBAC).
   - Define roles, assign permissions, and check access before granting it.

3. **Data Encryption**: Encrypt sensitive data in transit and at rest.

4. **Input Validation and Sanitization**: Prevent injection attacks (e.g., SQL injection, XSS).

5. **Rate Limiting**: Limit the number of requests a user can make in a given time period.

6. **Logging and Monitoring**: Keep logs of API access and monitor for suspicious activity.

7. **CORS Configuration**: Restrict which domains can access your API.

8. **Security Headers**: Use headers to protect against common web vulnerabilities.

9. **Regular Security Audits**: Conduct regular security audits and vulnerability assessments.

Study resources:
- **OWASP API Security Top 10**
- **OAuth2 and OpenID Connect**
- **JWT (JSON Web Tokens)**
- **Rails Security Guide**
- **React Security Best Practices**

By implementing these measures and continuously educating yourself on security best practices, you can better protect your data from unauthorized access through your API.


Rails 8 Authentication
Rails New
Install Authentication
Using Authentication

A couple handy tools that come out of the bos:
- authenticated? To check if the user is login
- allow_unauthenticated_access
- after_authentication_url
- current.user

Authentication:
https://www.youtube.com/watch?v=uGllXLfRx60

Authentication Adding Signup flow and user Profile
https://www.youtube.com/watch?v=iTDRjImTTCg&t=0s